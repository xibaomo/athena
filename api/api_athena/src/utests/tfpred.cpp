#include "predictor/tf23_wrapper.h"
#include <iostream>
using namespace std;

int main(int argc, char** argv)
{
    TFModel model;

    string pbfile(argv[1]);

    model.loadModel(pbfile);

    std::vector<std::int64_t> input_dims = {28, 28};
    const std::vector<float> input_vals =
    {


        };

    vector<float> features;
    int nf = 20;
    for(int i=0;i < nf; i++)
        features.insert(features.end(),input_vals.begin(),input_vals.end());
    model.setInputNodeName("x");
    model.setOutputNodeName("Identity");
    auto vv = model.predict(features.data(), nf,input_dims);

    cout<<vv.size()<<endl;
    for(auto v : vv[nf-1]) {
        cout<<v<<endl;
    }
    return 0;
}
